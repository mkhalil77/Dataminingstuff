
from math import sqrt
import random
import math


#Reading data from file

def read_in_data(file_name, separator):
    file_ = open(file_name, "r")  # just for reading

    data = []
    for line in file_:
        line = line.strip('\n')
        split_up = line.split(separator)
        data.append(split_up)

    return data

#defining new function for the distance
def new_Distance(x1,x2):#type 1
    distance = abs(float(x2[0]) - float(x1[0])) + abs(float(x2[1]) - float(x1[1]))  + abs(float(x2[2]) - float(x1[2])) + abs(float(x2[3]) - float(x1[3])) 
    #print distance    
    return distance

#defining euclidain distance
def euc_distance(x1,x2): #type 2
    distance = sqrt(((float(x2[0]) - float(x1[0]))**2) + ((float(x2[1]) - float(x1[1]))**2) + ((float(x2[2]) - float(x1[2]))**2) + ((float(x2[3]) - float(x1[3]))**2))
    #print distance
    return distance


#------------------------------------------------------------------------------
def print_cluster(info, cluster):
    for i in range(len(info)):
        print info[i][4] + ' cluster '+ str(cluster[i])  
        #print cluster[i]
    return

#------------------------------------------------------------------------------
def k_nn(info,k,d_type):
    #lets define the instances

    
    len_i       = len(info)
    index       = []
    centers     = []    
    assigns     = [k+1 for i in range(len_i)]
    assigns_1   = [ 0  for i in range(len_i)] 
    center_com  = [ [0, 0, 0, 0]  for i in range(k)]
    d_0  = 10000.0
    d_1  = 0.0
    
    for i in range(k):
        index.append(int(math.floor(random.uniform(0, len_i))))
        centers.append(info[index[i]][0:4])
        #print centers[i]
        
    while (assigns_1 != assigns):
        for i in range(len_i):
            for k_i in range(k):
                if d_type == 1:
                    #print centers[k_i]
                    d_1 = new_Distance(centers[k_i], info[i])
                else:
                    d_1 = euc_distance(centers[k_i], info[i])
                
                if d_1 < d_0:
                    assigns_1[i] = centers[k_i]
                d_0 = d_1
        assigns = assigns_1 # to compare the previous cluster
        #compute the centers          
        
        center_build = assigns[0]
        i_c = 0
        
        for an in range(k):
            center_com  = [ [0, 0, 0, 0]  for i in range(k)]
            #print center_com
            while (center_build == assigns[i_c]):
                center_com[an][0] = center_com[an][0] + float(info[i_c][0])
                center_com[an][1] = center_com[an][1] + float(info[i_c][1])
                center_com[an][2] = center_com[an][2] + float(info[i_c][2])
                center_com[an][3] = center_com[an][3] + float(info[i_c][3])
                                
                i_c = i_c + 1
                
            
            center_build = assigns[i_c]
            
            center_com[an][0] = center_com[an][0] / i_c
            center_com[an][1] = center_com[an][1] / i_c
            center_com[an][2] = center_com[an][2] / i_c
            center_com[an][3] = center_com[an][3] / i_c
            
            centers[an][0] = str(center_com[an][0])
            centers[an][1] = str(center_com[an][1])
            centers[an][2] = str(center_com[an][2])
            centers[an][3] = str(center_com[an][3])

    print_cluster(info,assigns)

    return assigns




data    = read_in_data("DataIris.txt",",")
cluster = k_nn(data,4,1)




